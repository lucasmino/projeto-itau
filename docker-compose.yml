version: "3.9"

services:
  db:
    image: postgres:16
    container_name: db
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - db_data:/var/lib/postgresql/data
    networks: [itau]

  fraud-mock:
    image: wiremock/wiremock:3.5.2
    container_name: fraud-mock
    command:
      - "--verbose"
      - "--global-response-templating"
    ports:
      - "${FRAUD_MOCK_PORT}:8080"
    volumes:
      - ./fraud-mock:/home/wiremock
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/__admin/"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks: [itau]

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"   # protocolo AMQP (conex√£o da app)
      - "15672:15672" # painel web do RabbitMQ
    networks: [itau]
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ${APP_NAME}
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      fraud-mock:
        condition: service_healthy
    ports:
      - "${APP_PORT}:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      REQUESTS_QUEUE: policy-requests
      FRAUD_BASE_URL: http://fraud-mock:8080
    networks: [itau]
    restart: on-failure

networks:
  itau: {}

volumes:
  db_data: {}
